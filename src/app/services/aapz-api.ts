/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL', {
    providedIn: 'root',
    factory: () => "http://localhost:5000"
});

@Injectable()
export class AAPZ_api {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param registerModel (optional) 
     * @return Success
     */
    registerDriver(registerModel: DriverRegisterModel | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Auth/register-driver";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerModel);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processRegisterDriver(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterDriver(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterDriver(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return _observableOf(result200);
            }));
        } else if (Math.floor(status / 100) === 4) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 ? DriverRegisterModel.fromJS(resultData400) : new DriverRegisterModel();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param registerModel (optional) 
     * @return Success
     */
    registerManager(registerModel: ManagerRegisterModel | null | undefined): Observable<Manager> {
        let url_ = this.baseUrl + "/api/Auth/register-manager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerModel);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processRegisterManager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterManager(<any>response_);
                } catch (e) {
                    return <Observable<Manager>><any>_observableThrow(e);
                }
            } else
                return <Observable<Manager>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterManager(response: HttpResponseBase): Observable<Manager> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Manager.fromJS(resultData200) : new Manager();
                return _observableOf(result200);
            }));
        } else if (Math.floor(status / 100) === 4) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 ? ManagerRegisterModel.fromJS(resultData400) : new ManagerRegisterModel();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Manager>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    loginDriver(model: AuthModel | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Auth/login-driver";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processLoginDriver(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoginDriver(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processLoginDriver(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return _observableOf(result200);
            }));
        } else if (Math.floor(status / 100) === 4) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 ? AuthModel.fromJS(resultData400) : new AuthModel();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    loginManager(model: AuthModel | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Auth/login-manager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processLoginManager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoginManager(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processLoginManager(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return _observableOf(result200);
            }));
        } else if (Math.floor(status / 100) === 4) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 ? AuthModel.fromJS(resultData400) : new AuthModel();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    logOff(): Observable<void> {
        let url_ = this.baseUrl + "/api/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processLogOff(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOff(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLogOff(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param company (optional) 
     * @return Success
     */
    createCompany(company: Company | null | undefined): Observable<Company> {
        let url_ = this.baseUrl + "/api/Company/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(company);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processCreateCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCompany(<any>response_);
                } catch (e) {
                    return <Observable<Company>><any>_observableThrow(e);
                }
            } else
                return <Observable<Company>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCompany(response: HttpResponseBase): Observable<Company> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result201: any = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 ? Company.fromJS(resultData201) : new Company();
                return _observableOf(result201);
            }));
        } else if (Math.floor(status / 100) === 4) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 ? Company.fromJS(resultData400) : new Company();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Company>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCompanies(): Observable<Company[]> {
        let url_ = this.baseUrl + "/api/Company/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAllCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCompanies(<any>response_);
                } catch (e) {
                    return <Observable<Company[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Company[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllCompanies(response: HttpResponseBase): Observable<Company[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(Company.fromJS(item));
                }
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Company[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCompany(name: string): Observable<Company> {
        let url_ = this.baseUrl + "/api/Company/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompany(<any>response_);
                } catch (e) {
                    return <Observable<Company>><any>_observableThrow(e);
                }
            } else
                return <Observable<Company>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompany(response: HttpResponseBase): Observable<Company> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? Company.fromJS(resultData200) : new Company();
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Company>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyDrivers(name: string): Observable<Driver[]> {
        let url_ = this.baseUrl + "/api/Company/drivers/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetCompanyDrivers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyDrivers(<any>response_);
                } catch (e) {
                    return <Observable<Driver[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Driver[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyDrivers(response: HttpResponseBase): Observable<Driver[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(Driver.fromJS(item));
                }
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Driver[]>(<any>null);
    }


    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return Success
     */
    getMyDriverStats(from: Date | null | undefined = undefined, to: Date | null | undefined = undefined): Observable<DriverStats> {
        let url_ = this.baseUrl + "/api/Stats/driver-stats/my?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMyDriverStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyDriverStats(<any>response_);
                } catch (e) {
                    return <Observable<DriverStats>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverStats>><any>_observableThrow(response_);
        }));
    }

    protected processGetMyDriverStats(response: HttpResponseBase): Observable<DriverStats> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(JSON.parse(_responseText, this.jsonParseReviver));
                result200 = resultData200 ? DriverStats.fromJS(resultData200) : new DriverStats();
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverStats>(<any>null);
    }


    getMyRatingPlace(): Observable<number> {
        let url_ = this.baseUrl + "/api/Stats/rating/my";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyRatingPlace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyRatingPlace(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetMyRatingPlace(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }


    /**
     * @return Success
     */
    getAllDriversRating(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Stats/rating/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDriversRating(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDriversRating(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDriversRating(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }


    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return Success
     */
    getDriverStats(id: string, from: Date = undefined, to: Date = undefined): Observable<DriverStats> {
        let url_ = this.baseUrl + "/api/Stats/driver-stats/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetDriverStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDriverStats(<any>response_);
                } catch (e) {
                    return <Observable<DriverStats>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverStats>><any>_observableThrow(response_);
        }));
    }

    protected processGetDriverStats(response: HttpResponseBase): Observable<DriverStats> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(JSON.parse(_responseText, this.jsonParseReviver));
                result200 = resultData200 ? DriverStats.fromJS(resultData200) : new DriverStats();
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverStats>(<any>null);
    }

    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return Success
     */
    getAllDriversStats(from: Date | null | undefined, to: Date | null | undefined): Observable<DriverStats> {
        let url_ = this.baseUrl + "/api/Stats/driver-stats?";
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAllDriversStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDriversStats(<any>response_);
                } catch (e) {
                    return <Observable<DriverStats>><any>_observableThrow(e);
                }
            } else
                return <Observable<DriverStats>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDriversStats(response: HttpResponseBase): Observable<DriverStats> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? DriverStats.fromJS(resultData200) : new DriverStats();
                return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DriverStats>(<any>null);
    }

    /**
     * @param driverIdentifier (optional) 
     * @return Success
     */
    startStream(driverIdentifier: string | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/Stream/start-stream?";
        if (driverIdentifier !== undefined)
            url_ += "driverIdentifier=" + encodeURIComponent("" + driverIdentifier) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processStartStream(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartStream(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processStartStream(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = resultData401 !== undefined ? resultData401 : <any>null;
                return throwException("A server error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result422: any = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = resultData422 !== undefined ? resultData422 : <any>null;
                return throwException("A server error occurred.", status, _responseText, _headers, result422);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    
    /**
     * @param driverId (optional) 
     * @return Success
     */
    streamExists(driverId: string | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Stream/stream-exists?";
        if (driverId !== undefined)
            url_ += "driverId=" + encodeURIComponent("" + driverId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStreamExists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStreamExists(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processStreamExists(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }


    
    /**
     * @param id (optional) 
     * @return Success
     */
    getUserInfo(id: string | null | undefined): Observable<UserInfo> {
        let url_ = this.baseUrl + "/api/Company/user-info?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserInfo(response: HttpResponseBase): Observable<UserInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserInfo.fromJS(resultData200) : new UserInfo();
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserInfo>(<any>null);
    }


    /**
     * @param driverIdentifier (optional) 
     * @return Success
     */
    stopStream(driverIdentifier: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Stream/stop-stream?";
        if (driverIdentifier !== undefined)
            url_ += "driverIdentifier=" + encodeURIComponent("" + driverIdentifier) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processStopStream(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStopStream(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processStopStream(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (Math.floor(status / 100) === 2) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class DriverRegisterModel implements IDriverRegisterModel {
    driver?: Driver | undefined;
    userName?: string | undefined;
    email!: string;
    password!: string;

    constructor(data?: IDriverRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driver = data["Driver"] ? Driver.fromJS(data["Driver"]) : <any>undefined;
            this.userName = data["UserName"];
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): DriverRegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new DriverRegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
        data["UserName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IDriverRegisterModel {
    driver?: Driver | undefined;
    userName?: string | undefined;
    email: string;
    password: string;
}

export class Driver implements IDriver {
    id?: string | undefined;
    identifierHashB64?: string | undefined;
    age?: number | undefined;
    experience?: number | undefined;
    companyName?: string | undefined;
    user?: User | undefined;
    company?: Company | undefined;
    rides?: Ride[] | undefined;

    constructor(data?: IDriver) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.identifierHashB64 = data["identifierHashB64"];
            this.age = data["age"];
            this.experience = data["experience"];
            this.companyName = data["companyName"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.company = data["company"] ? Company.fromJS(data["company"]) : <any>undefined;
            if (data["rides"] && data["rides"].constructor === Array) {
                this.rides = [] as any;
                for (let item of data["rides"])
                    this.rides!.push(Ride.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Driver {
        data = typeof data === 'object' ? data : {};
        let result = new Driver();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["identifierHashB64"] = this.identifierHashB64;
        data["age"] = this.age;
        data["experience"] = this.experience;
        data["companyName"] = this.companyName;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        if (this.rides && this.rides.constructor === Array) {
            data["rides"] = [];
            for (let item of this.rides)
                data["rides"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDriver {
    id?: string | undefined;
    identifierHashB64?: string | undefined;
    age?: number | undefined;
    experience?: number | undefined;
    companyName?: string | undefined;
    user?: User | undefined;
    company?: Company | undefined;
    rides?: Ride[] | undefined;
}

export class User implements IUser {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["UserName"];
            this.normalizedUserName = data["normalizedUserName"];
            this.email = data["email"];
            this.normalizedEmail = data["normalizedEmail"];
            this.emailConfirmed = data["emailConfirmed"];
            this.passwordHash = data["passwordHash"];
            this.securityStamp = data["securityStamp"];
            this.concurrencyStamp = data["concurrencyStamp"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.twoFactorEnabled = data["twoFactorEnabled"];
            this.lockoutEnd = data["lockoutEnd"] ? new Date(data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = data["lockoutEnabled"];
            this.accessFailedCount = data["accessFailedCount"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["UserName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IUser {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
}

export class Company implements ICompany {
    name?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    logoB64?: string | undefined;
    readonly numberOfEmployees?: number | undefined;
    drivers?: Driver[] | undefined;
    managers?: Manager[] | undefined;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.phone = data["phone"];
            this.address = data["address"];
            this.logoB64 = data["logoB64"];
            (<any>this).numberOfEmployees = data["numberOfEmployees"];
            if (data["drivers"] && data["drivers"].constructor === Array) {
                this.drivers = [] as any;
                for (let item of data["drivers"])
                    this.drivers!.push(Driver.fromJS(item));
            }
            if (data["managers"] && data["managers"].constructor === Array) {
                this.managers = [] as any;
                for (let item of data["managers"])
                    this.managers!.push(Manager.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Company {
        data = typeof data === 'object' ? data : {};
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["logoB64"] = this.logoB64;
        data["numberOfEmployees"] = this.numberOfEmployees;
        if (this.drivers && this.drivers.constructor === Array) {
            data["drivers"] = [];
            for (let item of this.drivers)
                data["drivers"].push(item.toJSON());
        }
        if (this.managers && this.managers.constructor === Array) {
            data["managers"] = [];
            for (let item of this.managers)
                data["managers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompany {
    name?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    logoB64?: string | undefined;
    numberOfEmployees?: number | undefined;
    drivers?: Driver[] | undefined;
    managers?: Manager[] | undefined;
}

export class Ride implements IRide {
    id?: number | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    inProgress?: boolean | undefined;
    driverId?: string | undefined;
    normalDrivingSeconds?: number | undefined;
    mobileRightSeconds?: number | undefined;
    mobileRightHeadSeconds?: number | undefined;
    mobileLeftSeconds?: number | undefined;
    mobileLeftHeadSeconds?: number | undefined;
    radioSeconds?: number | undefined;
    drinkSeconds?: number | undefined;
    searchSeconds?: number | undefined;
    makeupSeconds?: number | undefined;
    talkingSeconds?: number | undefined;
    driver?: Driver | undefined;

    constructor(data?: IRide) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.startTime = data["startTime"] ? new Date(data["startTime"].toString()) : <any>undefined;
            this.endTime = data["endTime"] ? new Date(data["endTime"].toString()) : <any>undefined;
            this.inProgress = data["inProgress"];
            this.driverId = data["driverId"];
            this.normalDrivingSeconds = data["normalDrivingSeconds"];
            this.mobileRightSeconds = data["mobileRightSeconds"];
            this.mobileRightHeadSeconds = data["mobileRightHeadSeconds"];
            this.mobileLeftSeconds = data["mobileLeftSeconds"];
            this.mobileLeftHeadSeconds = data["mobileLeftHeadSeconds"];
            this.radioSeconds = data["radioSeconds"];
            this.drinkSeconds = data["drinkSeconds"];
            this.searchSeconds = data["searchSeconds"];
            this.makeupSeconds = data["makeupSeconds"];
            this.talkingSeconds = data["talkingSeconds"];
            this.driver = data["Driver"] ? Driver.fromJS(data["Driver"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Ride {
        data = typeof data === 'object' ? data : {};
        let result = new Ride();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["inProgress"] = this.inProgress;
        data["driverId"] = this.driverId;
        data["normalDrivingSeconds"] = this.normalDrivingSeconds;
        data["mobileRightSeconds"] = this.mobileRightSeconds;
        data["mobileRightHeadSeconds"] = this.mobileRightHeadSeconds;
        data["mobileLeftSeconds"] = this.mobileLeftSeconds;
        data["mobileLeftHeadSeconds"] = this.mobileLeftHeadSeconds;
        data["radioSeconds"] = this.radioSeconds;
        data["drinkSeconds"] = this.drinkSeconds;
        data["searchSeconds"] = this.searchSeconds;
        data["makeupSeconds"] = this.makeupSeconds;
        data["talkingSeconds"] = this.talkingSeconds;
        data["Driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRide {
    id?: number | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    inProgress?: boolean | undefined;
    driverId?: string | undefined;
    normalDrivingSeconds?: number | undefined;
    mobileRightSeconds?: number | undefined;
    mobileRightHeadSeconds?: number | undefined;
    mobileLeftSeconds?: number | undefined;
    mobileLeftHeadSeconds?: number | undefined;
    radioSeconds?: number | undefined;
    drinkSeconds?: number | undefined;
    searchSeconds?: number | undefined;
    makeupSeconds?: number | undefined;
    talkingSeconds?: number | undefined;
    driver?: Driver | undefined;
}

export class Manager implements IManager {
    id?: string | undefined;
    certificate?: string | undefined;
    fullName?: string | undefined;
    companyName?: string | undefined;
    user?: User | undefined;
    company?: Company | undefined;

    constructor(data?: IManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.certificate = data["certificate"];
            this.fullName = data["fullName"];
            this.companyName = data["companyName"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.company = data["company"] ? Company.fromJS(data["company"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Manager {
        data = typeof data === 'object' ? data : {};
        let result = new Manager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["certificate"] = this.certificate;
        data["fullName"] = this.fullName;
        data["companyName"] = this.companyName;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        return data;
    }
}

export interface IManager {
    id?: string | undefined;
    certificate?: string | undefined;
    fullName?: string | undefined;
    companyName?: string | undefined;
    user?: User | undefined;
    company?: Company | undefined;
}

export class ManagerRegisterModel implements IManagerRegisterModel {
    manager?: Manager | undefined;
    userName?: string | undefined;
    email!: string;
    password!: string;

    constructor(data?: IManagerRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.manager = data["manager"] ? Manager.fromJS(data["manager"]) : <any>undefined;
            this.userName = data["UserName"];
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ManagerRegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerRegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        data["UserName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IManagerRegisterModel {
    manager?: Manager | undefined;
    userName?: string | undefined;
    email: string;
    password: string;
}

export class AuthModel implements IAuthModel {
    email!: string;
    password!: string;

    constructor(data?: IAuthModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): AuthModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuthModel {
    email: string;
    password: string;
}


export class UserInfo implements IUserInfo {
    id?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IUserInfo {
    id?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
}


export class DriverStats implements IDriverStats {
    readonly driverId?: string | undefined;
    readonly ridesTotal?: number | undefined;
    readonly drivingStyle?: DriverStatsDrivingStyle | undefined;
    readonly classesStats?: { [key: string]: number; } | undefined;
    readonly classesStatsScaled?: { [key: string]: number; } | undefined;

    constructor(data?: IDriverStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).driverId = data["DriverId"];
            (<any>this).ridesTotal = data["RidesTotal"];
            (<any>this).drivingStyle = data["DrivingStyle"];
            if (data["ClassesStats"]) {
                (<any>this).classesStats = {} as any;
                for (let key in data["ClassesStats"]) {
                    if (data["ClassesStats"].hasOwnProperty(key))
                        (<any>this).classesStats![key] = data["ClassesStats"][key];
                }
            }
            if (data["ClassesStatsScaled"]) {
                (<any>this).classesStatsScaled = {} as any;
                for (let key in data["ClassesStatsScaled"]) {
                    if (data["ClassesStatsScaled"].hasOwnProperty(key))
                        (<any>this).classesStatsScaled![key] = data["ClassesStatsScaled"][key];
                }
            }
        }
    }

    static fromJS(data: any): DriverStats {
        data = typeof data === 'object' ? data : {};
        let result = new DriverStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DriverId"] = this.driverId;
        data["RidesTotal"] = this.ridesTotal;
        data["DrivingStyle"] = this.drivingStyle;
        if (this.classesStats) {
            data["ClassesStats"] = {};
            for (let key in this.classesStats) {
                if (this.classesStats.hasOwnProperty(key))
                    data["ClassesStats"][key] = this.classesStats[key];
            }
        }
        if (this.classesStatsScaled) {
            data["ClassesStatsScaled"] = {};
            for (let key in this.classesStatsScaled) {
                if (this.classesStatsScaled.hasOwnProperty(key))
                    data["ClassesStatsScaled"][key] = this.classesStatsScaled[key];
            }
        }
        return data;
    }
}


export interface IDriverStats {
    driverId?: string | undefined;
    ridesTotal?: number | undefined;
    drivingStyle?: DriverStatsDrivingStyle | undefined;
    classesStats?: { [key: string]: number; } | undefined;
    classesStatsScaled?: { [key: string]: number; } | undefined;
}

export enum DriverStatsDrivingStyle {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _4 = 4,
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}